// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array ram;
    static Array freeList;

    /** Initializes the class. */
    function void init() {
        let ram = 0;
        let freeList = 2048;
        let freeList[0] = null;
        let freeList[1] = 14335;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        // first fit 
        var Array curr, block;
        let curr = freeList;
        while (~(curr = null) & (size + 2 > curr[1])) {
            let curr = curr[0];
        }
        if (curr = null) {
            return null;
        }
        let block = curr + curr[1] - size;
        let block[0] = null;
        let block[1] = size;
        let curr[1] = curr[1] - size - 2;
        return block;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var Array curr;
        let curr = freeList;
        while (~(curr[0] = null)) {
            let curr = curr[0];
        }
        let curr[0] = o;
        return;
    }    
}
