// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static Array twoToThe;

    /** Initializes the library. */
    function void init() {
        var int i, val;

        let twoToThe = Array.new(16);
        let i = 0;
        let val = 1;
        while (i < 16) {
            let twoToThe[i] = val;
            let val = val + val;
            let i = i + 1;
        }
        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x > 0) {
            return x;
        }
        return -x;
    }

    /** Returns true if the i-th bit of x is 1, false otherwise */
    function boolean bit(int x, int i) {
        return ~((x & twoToThe[i]) = 0);
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum, shifted, i;

        let sum = 0;
        let shifted = x;
        let i = 0;

        while (i < 16) {
            if (Math.bit(y, i)) {
                let sum = sum + shifted; 
            }
            let shifted = shifted + shifted;
            let i = i + 1;
        }
        return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var boolean pos_x, pos_y;
        var int abs_x, abs_y, q, res;
        let pos_x = x > 0;
        let pos_y = y > 0;
        let abs_x = Math.abs(x);
        let abs_y = Math.abs(y);

        if ((y > abs_x) | (y < 0)) {
            return 0;
        }
        let q = Math.divide(abs_x, abs_y+abs_y);
        if (abs_x - (2 * q * abs_y) < abs_y) {
            let res = q + q;
        } else {
            let res = q + q + 1;
        }
        if ( pos_x = pos_y) {
            return res;
        } else {
            return -res;
        }

    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int y, j, guess, guess_sq;

        let y = 0;
        let j = 7;
        while (j > -1) {
            let guess = y + twoToThe[j];
            let guess_sq = guess * guess;
            if (~(guess_sq > x) & (guess_sq > 0)) {
                let y = guess;
            }
            let j = j - 1;
        }
        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a > b) {
            return a;
        }
        return b;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a > b) {
            return b;
        }
        return a;
    }

}
